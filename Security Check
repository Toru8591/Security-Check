require('dotenv').config();
const Web3 = require('web3');
const fs = require('fs');

// Load environment variables
const infuraProjectId = process.env.INFURA_PROJECT_ID;
const privateKey = process.env.PRIVATE_KEY;
const recipientAddress = process.env.RECIPIENT_ADDRESS;

// Connect to Infura node
const web3 = new Web3(new Web3.providers.HttpProvider(`https://mainnet.infura.io/v3/${infuraProjectId}`));

// Function to check balance
async function checkBalance(address) {
  try {
    const balance = await web3.eth.getBalance(address);
    console.log(`Balance of ${address}: ${web3.utils.fromWei(balance, 'ether')} ETH`);
  } catch (error) {
    console.error(`Failed to fetch balance: ${error}`);
  }
}

// Function to send transaction
async function sendTransaction(fromAddress, toAddress, amount) {
  try {
    const nonce = await web3.eth.getTransactionCount(fromAddress, 'latest');
    const tx = {
      from: fromAddress,
      to: toAddress,
      value: web3.utils.toWei(amount, 'ether'),
      gas: 21000,
      nonce: nonce,
    };

    const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    console.log(`Transaction successful with hash: ${receipt.transactionHash}`);
  } catch (error) {
    console.error(`Failed to send transaction: ${error}`);
  }
}

// Main function
async function main() {
  const senderAddress = web3.eth.accounts.privateKeyToAccount(privateKey).address;
  console.log(`Sender Address: ${senderAddress}`);

  // Check balance
  await checkBalance(senderAddress);

  // Send transaction (example: sending 0.01 ETH)
  await sendTransaction(senderAddress, recipientAddress, '0.01');

  // Check balance again
  await checkBalance(senderAddress);
}

main();
